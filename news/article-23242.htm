<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
       <link rel="canonical" href="https://clashfans.github.io/news/article-23242.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/website/img/clashfans/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Prometheus TSDB存储原理</title>
        <meta name="description" content="Prometheus 包含一个存储在本地磁盘的时间序列数据库，同时也支持与远程存储系统集成，比如grafana cloud 提供的免费云存储API，只需将remote_write接口信息填写在Prom" />
    
    <meta name="author" content="ClashFans官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashfans.github.io/news/article-23242.htm" />
    <meta property="og:site_name" content="ClashFans官网订阅站" />
    <meta property="og:title" content="Prometheus TSDB存储原理" />
    <meta property="og:image" content="https://clashfans.github.io/uploads/20240307/eff500f0462ed92ca3251ca5466f2f58.webp" />
        <meta property="og:release_date" content="2024-12-09T10:27:03" />
    <meta property="og:updated_time" content="2024-12-09T10:27:03" />
        <meta property="og:description" content="Prometheus 包含一个存储在本地磁盘的时间序列数据库，同时也支持与远程存储系统集成，比如grafana cloud 提供的免费云存储API，只需将remote_write接口信息填写在Prom" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Prometheus TSDB存储原理">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">

    <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clashfans/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clashfans/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/website/css/clashfans/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashfans/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-P01PJ0V63S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-P01PJ0V63S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Clash Fans</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Prometheus TSDB存储原理 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>Prometheus 包含一个存储在本地磁盘的时间序列数据库，同时也支持与远程存储系统集成，比如<code>grafana cloud</code> 提供的免费云存储API，只需将<code>remote_write</code>接口信息填写在Prometheus配置文件即可。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/33ac88348eaa50140ebdd175add3524e.jpg" alt="Prometheus TSDB存储原理"></p> <p>本文不涉及远程存储接口内容，主要介绍Prometheus 时序数据的本地存储实现原理。</p> <h4 id="什么是时序数据">什么是时序数据？</h4> <hr/> <p>在学习Prometheus TSDB存储原理之前，我们先来认识一下Prometheus TSDB、InfluxDB这类时序数据库的时序数据指的是什么？</p> <p>时序数据通常以(key,value)的形式出现，在时间序列采集点上所对应值的集，即每个数据点都是一个由时间戳和值组成的元组。</p> <pre><code>identifier-&gt;(t0,v0),(t1,v1),(t2,v2)...</code></pre> <p>Prometheus TSDB的数据模型</p> <pre><code>&lt;metric name&gt;{&lt;label name&gt;=&lt;label value&gt;, ...}</code></pre> <p>具体到某个实例中</p> <pre><code>requests_total{method="POST", handler="/messages"}</code></pre> <p>在存储时可以通过name label来标记<code>metric name</code>，再通过标识符@来标识时间，这样构成了一个完整的时序数据样本。</p> <pre><code> ----------------------------------------key-----------------------------------------------value--------- {__name__="requests_total",method="POST", handler="/messages"}   @1649483597.197             52</code></pre> <p>一个时间序列是一组时间上严格单调递增的数据点序列，它可以通过metric来寻址。抽象成二维平面来看，二维平面的横轴代表单调递增的时间，<code>metrics</code>遍及整个纵轴。在提取样本数据时只要给定时间窗口和metric就可以得到value</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1731d4585b4b278e560abecbe288ae5c.jpg" alt="Prometheus TSDB存储原理"></p> <h3 id="时序数据如何在prometheus-tsdb存储">时序数据如何在Prometheus TSDB存储？</h3> <hr/> <p>上面我们简单了解了时序数据，接下来我们展开Prometheus TSDB存储（V3引擎）</p> <h5 id="prometheus-tsdb-概览">Prometheus TSDB 概览</h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1a06b70ea77e59fed2a9e13d57c500eb.jpg" alt="Prometheus TSDB存储原理"></p> <p>在上图中，Head 块是TSDB的内存块，灰色块Block是磁盘上的持久块。</p> <p>首先传入的样本（t,v）进入 Head 块，为了防止内存数据丢失先做一次<strong>预写日志 (WAL)</strong>，并在内存中停留一段时间，然后刷新到磁盘并进行<strong>内存映射(M-map)</strong>。当这些内存映射的块或内存中的块老化到某个时间点时，会作为持久块Block存储到磁盘。接下来多个Block在它们变旧时被合并，并在超过保留期限后被清理。</p> <h5 id="head中样本的生命周期">Head中样本的生命周期</h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/713f03120a8f0bf246d93ec6248c9591.jpg" alt="Prometheus TSDB存储原理"></p> <p>当一个样本传入时，它会被加载到Head中的active chunk（红色块），这是唯一一个可以主动写入数据的单元，为了防止内存数据丢失还会做一次<strong>预写日志 (WAL)</strong>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/353fc9ce4f5627f9e16de86f1e503ed7.jpg" alt="Prometheus TSDB存储原理"></p> <p>一旦active chunk被填满时（超过2小时或120样本），将旧的数据截断为head_chunk1。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8c55536ae31fffa45f46e2e723494910.jpg" alt="Prometheus TSDB存储原理"></p> <p>head_chunk1被刷新到磁盘然后进行内存映射。active chunk继续写入数据、截断数据、写入到内存映射，如此反复。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/64ed58d36b9454a405c26b2261280f07.jpg" alt="Prometheus TSDB存储原理"></p> <p>内存映射应该只加载最新的、最被频繁使用的数据，所以Prometheus TSDB将就是旧数据刷新到磁盘持久化存储Block，如上1-4为旧数据被写入到下图的Block中。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fadbffb38e645ea2fc9f7e07a2ea940e.jpg" alt="Prometheus TSDB存储原理"></p> <p>此时我们再来看一下Prometheus TSDB 数据目录基本结构，好像更清晰了一些。</p> <pre><code class="language-shell">./data ├── 01BKGV7JBM69T2G1BGBGM6KB12     │   └── meta.json ├── 01BKGTZQ1SYQJTR4PB43C8PD98   # block ID │   ├── chunks  	   # Block中的chunk文件 │   │   └── 000001      │   ├── tombstones     # 数据删除记录文件 │   ├── index          # 索引 │   └── meta.json	   # bolck元信息 ├── chunks_head		   # head内存映射 │   └── 000001		   └── wal			       # 预写日志     ├── 000000002	       └── checkpoint.00000001         └── 00000000</code></pre> <h5 id="wal-中checkpoint的作用">WAL 中checkpoint的作用</h5> <p>我们需要定期删除旧的 wal 数据，否则磁盘最终会被填满，并且在TSDB重启时 replay wal 事件时会占用大量时间，所以wal中任何不再需要的数据，都需要被清理。而checkpoint会将wal 清理过后的数据做过滤写成新的段。</p> <p>如下有6个wal数据段</p> <pre><code>data └── wal     ├── 000000     ├── 000001     ├── 000002     ├── 000003     ├── 000004     └── 000005</code></pre> <p>现在我们要清理时间点<code>T</code>之前的样本数据，假设为前4个数据段：</p> <p>检查点操作将按<code>000000</code><code>000001</code><code>000002</code><code>000003</code>顺序遍历所有记录，并且：</p> <ol> <li>删除不再在 Head 中的所有序列记录。</li> <li>丢弃所有 time 在<code>T</code>之前的样本。</li> <li>删除<code>T</code>之前的所有 tombstone 记录。</li> <li>重写剩余的序列、样本和tombstone记录（与它们在 WAL 中出现的顺序相同）。</li> </ol> <p>checkpoint被命名为创建checkpoint的最后一个段号<code>checkpoint.X</code></p> <p>这样我们得到了新的wal数据，当wal在replay时先找checkpoint，先从checkpoint中的数据段回放，然后是checkpoint.000003的下一个数据段000004</p> <pre><code>data └── wal     ├── checkpoint.000003     |   ├── 000000     |   └── 000001     ├── 000004     └── 000005</code></pre> <h5 id="block的持久化存储">Block的持久化存储</h5> <p>上面我们认识了wal和chunks_head的存储构造，接下来是Block，什么是持久化Block？在什么时候创建？为啥要合并Block?</p> <p>Block的目录结构</p> <pre><code class="language-shell">├── 01BKGTZQ1SYQJTR4PB43C8PD98   # block ID │   ├── chunks  	   # Block中的chunk文件 │   │   └── 000001      │   ├── tombstones     # 数据删除记录文件 │   ├── index          # 索引 │   └── meta.json	   # bolck元信息</code></pre> <p>磁盘上的Block是固定时间范围内的chunk的集合，由它自己的索引组成。其中包含多个文件的目录。每个Block都有一个唯一的 ID（ULID），他这个ID是可排序的。当我们需要更新、修改Block中的一些样本时，Prometheus TSDB只能重写整个Block，并且新块具有新的 ID（为了实现后面提到的索引）。如果需要删除的话Prometheus TSDB通过tombstones 实现了在不触及原始样本的情况下进行清理。</p> <p><strong>tombstones</strong> 可以认为是一个删除标记，它记载了我们在读取序列期间要忽略哪些时间范围。tombstones 是Block中唯一在写入数据后用于存储删除请求所创建和修改的文件。</p> <p>tombstones中的记录数据结构如下，分别对应需要忽略的序列、开始和结束时间。</p> <pre><code>┌────────────────────────┬─────────────────┬─────────────────┐ │ series ref &lt;uvarint64&gt; │ mint &lt;varint64&gt; │ maxt &lt;varint64&gt; │ └────────────────────────┴─────────────────┴─────────────────┘</code></pre> <p><strong>meta.json</strong></p> <p>meta.json包含了整个Block的所有元数据</p> <pre><code>{     "ulid": "01EM6Q6A1YPX4G9TEB20J22B2R",     "minTime": 1602237600000,     "maxTime": 1602244800000,     "stats": {         "numSamples": 553673232,         "numSeries": 1346066,         "numChunks": 4440437     },     "compaction": {         "level": 1,         "sources": [             "01EM65SHSX4VARXBBHBF0M0FDS",             "01EM6GAJSYWSQQRDY782EA5ZPN"         ]     },     "version": 1 }</code></pre> <p>记录了人类可读的chunks的开始和结束时间，样本、序列、chunks数量以及合并信息。version告诉Prometheus如何解析metadata</p> <p><strong>Block合并</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fadbffb38e645ea2fc9f7e07a2ea940e.jpg" alt="Prometheus TSDB存储原理"></p> <p>我们可以从之前的图中看到当内存映射中chunk跨越2小时（默认）后第一个Block就被创建了，当 Prometheus 创建了一堆Block时，我们需要定期对这些块进行维护，以有效利用磁盘并保持查询的性能。</p> <p>Block合并的主要工作是将一个或多个现有块（source blocks or parent blocks）写入一个新块，最后，删除源块并使用新的合并后的Block代替这些源块。</p> <p><strong>为什么需要对Block进行合并？</strong></p> <ol> <li>上面对tombstones介绍我们知道Prometheus在对数据的删除操作会记录在单独文件stombstone中，而数据仍保留在磁盘上。因此，当stombstone序列超过某些百分比时，需要从磁盘中删除该数据。</li> <li>如果样本数据值波动非常小，相邻两个Block中的大部分数据是相同的。对这些Block做合并的话可以减少重复数据，从而节省磁盘空间。</li> <li>当查询命中大于1个Block时，必须合并每个块的结果，这可能会产生一些额外的开销。</li> <li>如果有重叠的Block（在时间上重叠），查询它们还要对Block之间的样本进行重复数据删除，合并这些重叠块避免了重复数据删除的需要。</li> <li><img decoding="async" src="https://markdown-1257692304.cos.ap-nanjing.myqcloud.com/markdown_img/image-20220414120529698.png" alt="Prometheus TSDB存储原理"></li> </ol> <p>如上图示例所示，我们有一组顺序的Block<code>[1, 2, 3, 4]</code>。数据块1，2，和3可以被合并形成的新的块是<code>[1, 4]</code>。或者成对压缩为[1，3]。 所有的时间序列数据仍然存在，但是现在总体的数据块更少。 这显著降低了查询成本。</p> <p><strong>Block是如何删除的？</strong></p> <p>对于源数据的删除Prometheus TSDB采用了一种简单的方式：即删除该目录下不在我们保留时间窗口的块。</p> <p>如下图所示，块1可以安全地被删除，而2必须保留到完全落在边界之后</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7ac90a390eb83e2427de09921c0e41e1.jpg" alt="Prometheus TSDB存储原理"></p> <p>因为Block合并的存在，意味着获取越旧的数据，数据块可能就变得越大。 因此必须得有一个合并的上限，，这样块就不会增长到跨越整个数据库。通常我们可以根据保留窗口设置百分比。</p> <h3 id="如何从大量的series中检索出数据">如何从大量的series中检索出数据？</h3> <hr/> <p>在Prometheus TSDB V3引擎中使用了倒排索引，倒排索引基于它们内容的子集提供对数据项的快速查找，例如我们要找出所有带有标签<code>app ="nginx"</code>的序列，而无需遍历每一个序列然后再检查它是否包含该标签。</p> <p>首先我们给每个序列分配一个唯一ID，查询ID的复杂度是O(1)，然后给每个标签建一个倒排ID表。比如包含<code>app ="nginx"</code>标签的ID为1,11,111那么标签"nginx"的倒排序索引为[1,11,111]，这样一来如果n是我们的序列总数，m是查询的结果大小，那么使用倒排索引的查询复杂度是O(m)，也就是说查询的复杂度由m的数量决定。但是在最坏的情况下，比如我们每个序列都有一个“nginx”的标签，显然此时的复杂度变为O(n)了，如果是个别标签的话无可厚非，只能稍加等待了，但是现实并非如此。</p> <p>标签被关联到数百万序列是很常见的，并且往往每次查询会检索多个标签，比如我们要查询这样一个序列<strong>app =“dev”AND app =“ops”</strong> 在最坏情况下复杂度是O(n<sup>2)，接着更多标签复杂度指数增长到O(n</sup>3)、O(n<sup>4)、O(n</sup>5)... 这是不可接受的。那咋办呢？</p> <p>如果我们将倒排表进行排序会怎么样？</p> <pre><code>"app=dev" -&gt; [100,1500,20000,51166] "app=ops" -&gt; [2,4,8,10,50,100,20000]</code></pre> <p>他们的交集为[100,20000]，要快速实现这一点，我们可以通过2个游标从列表值较小的一端率先推进，当值相等时就是可以加入到结果集合当中。这样的搜索成本显然更低，在k个倒排表搜索的复杂度为O(k*n)而非最坏情况下O(n^k)</p> <p>剩下就是维护这个索引，通过维护时间线与ID、标签与倒排表的映射关系，可以保证查询的高效率。</p> <hr/> <p>以上我们从较浅的层面了解一下Prometheus TSDB存储相关的内容，本文仍然有很多细节没有提及，比如wal如何做压缩与回放，mmap的原理，TSDB存储文件的数据结构等等，如果你需要进一步学习可移步参考文章。通过博客阅读：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://iqsing.github.io"  target="_blank" rel="nofollow">iqsing.github.io</a></p> <hr/> <p>本文参考于：</p> <p>Prometheus维护者Ganesh Vernekar的系列博客<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ganeshvernekar.com/blog/prometheus-tsdb-the-head-block/"  target="_blank" rel="nofollow">Prometheus TSDB</a></p> <p>Prometheus维护者Fabian的博客文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://fabxc.org/tsdb/"  target="_blank" rel="nofollow">Writing a Time Series Database from Scratch</a>（原文已失效）</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.youtube.com/watch?v=b_pEevMAC3I"  target="_blank" rel="nofollow">PromCon 2017: Storing 16 Bytes at Scale - Fabian Reinartz</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22784.htm">动物医院的医生工资（动物医院工作怎么样）</a></p>
                                        <p>下一个：<a href="/news/article-23243.htm">58同城土狗领养（58同城宠物店领养）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-33575.htm" title="厦门同安宠物领养中心地址电话 厦门同安宠物领养中心地址电话号码">厦门同安宠物领养中心地址电话 厦门同安宠物领养中心地址电话号码</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-11-free-v2ray.htm" title="1月11日21.4M/S|Shadowrocket/Clash/V2ray/SSR免费节点每天更新链接地址，便宜机场推荐">1月11日21.4M/S|Shadowrocket/Clash/V2ray/SSR免费节点每天更新链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-28-free-subscribe-node.htm" title="11月28日22.3M/S|Clash/V2ray/Shadowrocket/SSR免费节点每天更新订阅链接，便宜机场推荐">11月28日22.3M/S|Clash/V2ray/Shadowrocket/SSR免费节点每天更新订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-21-clash-v2ray-ss-ssr.htm" title="11月21日22M/S|SSR/V2ray/Clash/Shadowrocket免费节点每天更新订阅链接，便宜机场推荐">11月21日22M/S|SSR/V2ray/Clash/Shadowrocket免费节点每天更新订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-22-node-share-links.htm" title="1月22日20.5M/S|Shadowrocket/V2ray/SSR/Clash免费节点每天更新链接地址，便宜机场推荐">1月22日20.5M/S|Shadowrocket/V2ray/SSR/Clash免费节点每天更新链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-40364.htm" title="猫三针疫苗打完多久打狂犬（猫三针疫苗打完多久打狂犬疫苗好）">猫三针疫苗打完多久打狂犬（猫三针疫苗打完多久打狂犬疫苗好）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-28-free-clash-subscribe.htm" title="12月28日18.7M/S|Clash/Shadowrocket/SSR/V2ray免费节点每天更新链接地址，便宜机场推荐">12月28日18.7M/S|Clash/Shadowrocket/SSR/V2ray免费节点每天更新链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-34531.htm" title="适合穷养的狗有哪些（适合穷养的狗有哪些品种图片）">适合穷养的狗有哪些（适合穷养的狗有哪些品种图片）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-14-clash-v2ray-ss-ssr.htm" title="1月14日22.7M/S|Clash/SSR/V2ray/Shadowrocket免费节点每天更新链接地址，便宜机场推荐">1月14日22.7M/S|Clash/SSR/V2ray/Shadowrocket免费节点每天更新链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-35401.htm" title="动物医院部门科室是什么（动物医院诊室）">动物医院部门科室是什么（动物医院诊室）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="copyright_text">
                        ClashFans官网订阅站 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/website/js/frontend/clashfans/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/popper.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/jquery-3.0.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/plugin.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>