<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://clashfans.github.io/news/article-32617.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/website/img/clashfans/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>python协程 &amp; asyncio &amp; 异步编程（一） 协程</title>
        <meta name="description" content="一、引入 协程不是计算机提供，程序员人为创造 协程，也可以被称为微线程，是一种用户态的上下文切换技术，简而言之，其实就是通过一个线程实现代码块相互切换执行 实现协程有几种方法： 1、greenlet，" />
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clashfans/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clashfans/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/website/css/clashfans/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashfans/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-P01PJ0V63S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-P01PJ0V63S');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Clash Fans</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">python协程 &amp; asyncio &amp; 异步编程（一） 协程 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="_0" rel="nofollow"></a>一、引入</h2> <p>协程不是计算机提供，程序员人为创造</p> <p>协程，也可以被称为微线程，是一种用户态的上下文切换技术，简而言之，其实就是通过一个线程实现代码块相互切换执行</p> <p>实现协程有几种方法：<br /> 1、greenlet，早期模块（了解即可）<br /> 2、yield 关键字　（了解即可）<br /> 3、asyncio 标准库 装饰器 （python3.4＋引入）<br /> 4、async、await关键字 （python3.５＋推荐）</p> <p>1.1 asyncio<br /> 在python3.4及之后的版本</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span><span class="token keyword">def</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">yield</span><span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">yield</span><span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   tasks<span class="token operator">=</span><span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>注意：遇到IO阻塞自动切换</p> <p>1.2 async &amp; await 关键字</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   tasks<span class="token operator">=</span><span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <h2><a id="_67" rel="nofollow"></a>二、协程的意义</h2> <p>在一个线程中如果遇到IO等待时间，线程不会等待，利用空闲时间，再去完成其它任务。<br /> 案例，下载三张图片：</p> <p><strong>1、普通方式（同步）：</strong></p> <pre><code class="prism language-python"><span class="token triple-quoted-string string">""" 时间:  更改记录:  重要说明:  """</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> uuid<span class="token keyword">def</span><span class="token function">get_file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.png'</span><span class="token keyword">def</span><span class="token function">download_image</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start download'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>     response<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'download done'</span><span class="token punctuation">)</span>      file_name<span class="token operator">=</span> get_file_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span><span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> file_obj<span class="token punctuation">:</span>         file_obj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>     urls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'https://t7.baidu.com/it/u=813347183,2158335217&amp;fm=193&amp;f=GIF'</span><span class="token punctuation">,</span><span class="token string">'https://t7.baidu.com/it/u=1819644070,1305753509&amp;fm=193&amp;f=GIF'</span><span class="token punctuation">,</span><span class="token string">'https://t7.baidu.com/it/u=124476473,2583135375&amp;fm=193&amp;f=GIF'</span><span class="token punctuation">]</span><span class="token keyword">for</span> url<span class="token keyword">in</span> urls<span class="token punctuation">:</span>         download_image<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre> <p><strong>2、协程方式（异步）：</strong></p> <pre><code class="prism language-python"><span class="token triple-quoted-string string">""" 时间:  更改记录:  重要说明:  python3.7+  """</span><span class="token keyword">import</span> uuid<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">def</span><span class="token function">get_file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.png'</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">download_image</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start download'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">as</span> response<span class="token punctuation">:</span>         content<span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>         file_name<span class="token operator">=</span> get_file_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span><span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> file_obj<span class="token punctuation">:</span>             file_obj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'download done'</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">async</span><span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">as</span> session<span class="token punctuation">:</span>         tasks<span class="token operator">=</span><span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>download_image<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> url<span class="token keyword">in</span> urls<span class="token punctuation">]</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>     urls<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'https://t7.baidu.com/it/u=813347183,2158335217&amp;fm=193&amp;f=GIF'</span><span class="token punctuation">,</span><span class="token string">'https://t7.baidu.com/it/u=1819644070,1305753509&amp;fm=193&amp;f=GIF'</span><span class="token punctuation">,</span><span class="token string">'https://t7.baidu.com/it/u=124476473,2583135375&amp;fm=193&amp;f=GIF'</span><span class="token punctuation">]</span>          asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <h2><a id="_161" rel="nofollow"></a>三、异步编程</h2> <p><strong>1 事件循环</strong><br /> asyncio原理，可以理解为一个死循环，去检测并执行某些代码</p> <p>伪代码理解：</p> <pre><code class="prism language-python">任务列表<span class="token operator">=</span> 【任务<span class="token number">1</span>， 任务<span class="token number">2</span>，任务<span class="token number">3</span>】<span class="token keyword">while</span><span class="token boolean">True</span><span class="token punctuation">:</span><span class="token comment">#  可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将“可执行”和“已完成”的任务返回</span><span class="token keyword">for</span> 就绪任务<span class="token keyword">in</span> 可执行的任务列表： 		      执行就绪任务<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> 已完成的任务<span class="token keyword">in</span> 已完成的任务列表： 		       在任务列表中移除，已完成的任务 		        		 如果任务列表中所有任务已完成，则终止执行</code></pre> <p><strong>2 快速上手</strong></p> <p>(1) 协程函数： 定义函数时： async def 函数名<br /> (2) 协程对象： 执行协程函数 得到的就是协程对象</p> <pre><code class="prism language-python"><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span>  result<span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>注意：这样执行协程函数时，函数内部代码不会执行，会返回创建的协程对象</p> <p>如果想要运行协程函数内部代码，必须要将协程对象交给事件循环来处理</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span>  result<span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 让事件循环执行协程函数</span> loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># python3.7+简便写法</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre> <p><strong>3 await</strong><br /> await + 可等待的对象（协程对象、FUTURE对象、TASK对象）</p> <p>示例１：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> 	response<span class="token operator">=</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>示例２：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'返回值'</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码'</span><span class="token punctuation">)</span><span class="token comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续向下执行，当前协程挂起时，事件循环可以去执行其它协程（任务）</span>     response<span class="token operator">=</span><span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码'</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>示例３：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'返回值'</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码'</span><span class="token punctuation">)</span><span class="token comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续向下执行，当前协程挂起时，事件循环可以去执行其它协程（任务）</span>     response1<span class="token operator">=</span><span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码1'</span><span class="token punctuation">,</span> response1<span class="token punctuation">)</span>     response2<span class="token operator">=</span><span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行协程函数内部代码2'</span><span class="token punctuation">,</span> response2<span class="token punctuation">)</span>      asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>await就是等待对象的值得到结果之后再继续向下走。</p> <p><strong>4 Task对象</strong><br /> 在事件循环中添加多个任务的。<br /> TASK用于并发调度协程，通过asynic.create_task（协程对象）的方式创建TASK对象，这样可以让协程加入事件循环中等待被调度执行，除了使用asyncio.create_task()函数以外，还可以用低层级的loop.create_task() 或ensure_future() 函数，不建议手动实例化Task对象。<br /> 注意：asyncio.create_task()函数在Python3.7中被加入，3.7之前可以改用低层级的asyncio.ensure_future()函数</p> <p>示例1</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'返回值'</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main start'</span><span class="token punctuation">)</span><span class="token comment"># 创建TASK对象，将当前执行func函数任务添加到事件循环</span>     task1<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      task2<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main end'</span><span class="token punctuation">)</span><span class="token comment"># 当执行某协程遇到IO操作时，会自动化切换很乖其他任务</span><span class="token comment"># 此处的await是等待相对应的协程全部执行完并获取结果</span>     ret1<span class="token operator">=</span><span class="token keyword">await</span> task1     ret2<span class="token operator">=</span><span class="token keyword">await</span> task2<span class="token keyword">print</span><span class="token punctuation">(</span>ret1<span class="token punctuation">,</span> ret2<span class="token punctuation">)</span>      asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>示例2:</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'返回值'</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main start'</span><span class="token punctuation">)</span>      task_list<span class="token operator">=</span><span class="token punctuation">[</span>         asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main end'</span><span class="token punctuation">)</span><span class="token comment"># done是返回值的集合</span>     done<span class="token punctuation">,</span> pending<span class="token operator">=</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> pending<span class="token punctuation">)</span>   asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>示例3</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'返回值'</span>   task_list<span class="token operator">=</span><span class="token punctuation">[</span>     func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   done<span class="token punctuation">,</span> pending<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span></code></pre> <p><strong>5 Future对象</strong></p> <p>Task类的基类，Task类内部await结果和处理基于Future类来的</p> <p>示例1：</p> <pre><code class="prism language-python"><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 获取当前事件循环</span>     loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个任务（FUTURE对象），这个任务什么都不干</span>     fut<span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待任务最终结果（FUTURE对象），没有结果则会一直等下去</span><span class="token keyword">await</span> fut<span class="token keyword">async</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>示例2：</p> <pre><code class="prism language-python"><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">set_after</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 获取当前事件循环</span>     loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个任务（FUTURE对象），这个任务什么都不干</span>     fut<span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 即手动设置FUTURE任务的最终结果,fut就可以结束 了</span><span class="token keyword">await</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>set_after<span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 等待任务最终结果（FUTURE对象），没有结果则会一直等下去</span> 	data<span class="token operator">=</span><span class="token keyword">await</span> fut<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">async</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p><strong>6 concurrent.futures.Future对象</strong></p> <p>使用线程池、进程池实现异步操作时用到的对象</p> <pre><code class="prism language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token keyword">import</span> Future<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread<span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>process<span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>     time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment"># 创建线程池</span> pool<span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 创建进程池</span><span class="token comment"># pool = ProcessPoolExecutor(max_workers=5)</span><span class="token keyword">for</span> i<span class="token keyword">in</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     fut<span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>func<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span></code></pre> <p>与协程交叉使用：<br /> 示例：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures<span class="token keyword">def</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 某个耗时操作</span>     time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">'func1 done'</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>          fut<span class="token operator">=</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span>      result<span class="token operator">=</span><span class="token keyword">await</span> fut<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'default thread pool'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>   asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <h2><a id="_463" rel="nofollow"></a>三、异步编程实战案例</h2> <p><strong>１、异步上下文管理器</strong><br /> 此种对象通过定义__aenter__()和__aexit__() 方法来对async with语句中的环境进行控制</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">class</span><span class="token class-name">AsyncContextManager</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>conn<span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">do_someting</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token number">666</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">__aenter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>conn<span class="token operator">=</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> self<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">__aexit__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">async</span><span class="token keyword">with</span> AsyncContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>         result<span class="token operator">=</span><span class="token keyword">await</span> f<span class="token punctuation">.</span>do_someting<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p><strong>2、uvloop</strong></p> <p>是asyncio中事件循环的替代方案，第三方框架，事件循环效率更高</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> uvloop<span class="token comment"># 设置为使用uvloop代替默认loop</span> asyncio<span class="token punctuation">.</span>set_event_loop_policy<span class="token punctuation">(</span>uvloop<span class="token punctuation">.</span>EventLoopPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p><strong>3、异步操作redis</strong><br /> 在使用python代码操作redis时，链接、操作、断开都是网络IO</p> <pre><code class="prism language-python"><span class="token keyword">import</span> aioredis</code></pre> <p><strong>4、异步操作MySql</strong></p> <pre><code class="prism language-python"><span class="token keyword">import</span> aiomysql</code></pre> <p><strong>5、FastAPI框架</strong></p> <p>以fastAPI框架为例，了解异步WEB框架</p> <pre><code class="prism language-bash">pip3<span class="token function">install</span> fastapi pip3<span class="token function">install</span> uvicorn</code></pre> <h2><a id="_529" rel="nofollow"></a>总结</h2> <p>最大的意义：通过一个线程利用其IO等待时间去做一些其他事情。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-32616.htm">Android开发基础——Kotlin：标准函数和静态方法</a></p>
                                        <p>下一个：<a href="/news/article-33112.htm">和田市宠物店电话多少（和田宠物市场在哪里）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-5-13-free-v2ray-subscribe.htm" title="5月13日22M/S|Shadowrocket/Clash/V2ray/SSR免费节点每天更新订阅链接">5月13日22M/S|Shadowrocket/Clash/V2ray/SSR免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-31157.htm" title="URL编码及解码">URL编码及解码</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-11-shadowrocket-node.htm" title="8月11日20M/S|SSR/V2ray/Shadowrocket/Clash免费节点每天更新订阅链接">8月11日20M/S|SSR/V2ray/Shadowrocket/Clash免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-28-node-share.htm" title="8月28日22.5M/S|V2ray/Shadowrocket/SSR/Clash免费节点每天更新订阅链接">8月28日22.5M/S|V2ray/Shadowrocket/SSR/Clash免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-12-free-ssr-node.htm" title="11月12日22.6M/S|Clash/SSR/Shadowrocket/V2ray免费节点每天更新订阅链接，便宜机场推荐">11月12日22.6M/S|Clash/SSR/Shadowrocket/V2ray免费节点每天更新订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-32616.htm" title="Android开发基础——Kotlin：标准函数和静态方法">Android开发基础——Kotlin：标准函数和静态方法</a></li>
                        <li class="py-2"><a href="/news/article-19122.htm" title="动物医院看病贵吗多少钱一天（动物医院价目表）">动物医院看病贵吗多少钱一天（动物医院价目表）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-23-clash-node-daily-updates.htm" title="9月23日21.9M/S|V2ray/Clash/Shadowrocket/SSR免费节点每天更新订阅链接">9月23日21.9M/S|V2ray/Clash/Shadowrocket/SSR免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-5-3-clash-node.htm" title="5月3日18.1M/S|Clash/SSR/V2ray/Shadowrocket免费节点每天更新订阅链接">5月3日18.1M/S|Clash/SSR/V2ray/Shadowrocket免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-5-5-clash-node.htm" title="5月5日20.3M/S|SSR/V2ray/Shadowrocket/Clash免费节点每天更新订阅链接">5月5日20.3M/S|SSR/V2ray/Shadowrocket/Clash免费节点每天更新订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="copyright_text">
                        ClashFans官网订阅站 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/website/js/frontend/clashfans/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/popper.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/jquery-3.0.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/plugin.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>